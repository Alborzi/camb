if (length(is.highly.correlated) != 0) {
x.train <- x.train[, -is.highly.correlated]
x.test <- x.test[, -is.highly.correlated]
}
dim(x.train)
transformation <- preProcess(x.train, method = c("center", "scale"))
x.train <- predict(transformation, x.train)
x.test <- predict(transformation, x.test)
set.seed(1)
folds=5
repeats=1
trControl <- trainControl(method='cv', number=folds, repeats=repeats, returnResamp='none',
returnData=FALSE, savePredictions=TRUE,
verboseIter=TRUE, allowParallel=TRUE,
index=createMultiFolds(y.train, k=folds, times=repeats))
save.image(file="data.rda")
registerDoMC(cores=1)
tune.grid <- expand.grid(.n.trees=500, .interaction.depth=c(25), .shrinkage = c(0.04, 0.08, 0.16))
gbm <- train(x.train, y.train, "gbm", tuneGrid=tune.grid, trControl=trControl)
tune.grid <- expand.grid(.n.trees=500, .interaction.depth=c(25), .shrinkage = c(0.04, 0.08, 0.16))
gbm
predictions <- as.vector(predict(gbm, newdata = x.test))
plot(predictions, y.test)
length(y.test)
plot(x.test$[,1], y.test)
x.test$[,1]
plot(x.test[,1], y.test)
head(data)
x.test[,1]
testPercentage <- 20
testSize <- round(nrow(x) * (testPercentage/100))
set.seed(1)
test <- sample(1:nrow(x), testSize, replace=FALSE)
train <- (1:length(y))[-test]
x.train <- x[train, ]
x.test <- x[test, ]
y.train <- y[train]
y.test <- y[test]
nzv.columns <- nearZeroVar(x.train, freqCut = 30/1)
is.highly.correlated <- findCorrelation(cor(x.train), 0.95)
if (length(is.highly.correlated) != 0) {
x.train <- x.train[, -is.highly.correlated]
x.test <- x.test[, -is.highly.correlated]
}
dim(x.train)
plot(x.test[,1], y.test)
x.test[,1]
head(x.text)
head(x.test)
testPercentage <- 20
testSize <- round(nrow(x) * (testPercentage/100))
set.seed(1)
test <- sample(1:nrow(x), testSize, replace=FALSE)
train <- (1:length(y))[-test]
x.train <- x[train, ]
x.test <- x[test, ]
y.train <- y[train]
y.test <- y[test]
head(x.test)
plot(x.test[,1], y.test)
plot(predictions, y.test)
?RMSE
RMSE(x.test[,1], y.test)
RMSE(predictions, y.test)
is.highly.correlated
RMSE(x.test[,1], y.test)
RMSE(predictions, y.test)
library(caret)
data <- read.csv("PriceData.csv")
names(data) <- c("day", names(data)[2:length(names(data))])
days <- unique(data$day)
history <- 1
points_in_day <- length(which(data$day==days[1]))
days <- unique(data$day)
history <- 2
points_in_day <- length(which(data$day==days[1]))
points <- (points_in_day - history) * length(days)
y <- rep(NA, points)
x <- matrix(nrow=points, ncol=(51+52))
dim(x)
points_in_day
days <- unique(data$day)
history <- 2
points_in_day <- length(which(data$day==days[1]))
points_in_day
points_in_day
history
length(days)
points <- (points_in_day - history) * length(days)
y <- rep(NA, points)
x <- matrix(nrow=points, ncol=(51+52))
dim(x)
(points_in_day - history)
points
x <- matrix(nrow=points, ncol=((51*history)+52))
dim(x)
dim(x)
tail(x)
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r]
row <- as.numeric(dd[r, c(4:ncol(dd))])
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))])
}
x[point,] <- row
point <- point + 1
}
}
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r]
row <- as.numeric(dd[r, c(4:ncol(dd))])
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]))
}
x[point,] <- row
point <- point + 1
}
}
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r]
row <- as.numeric(dd[r, c(4:ncol(dd))])
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]))
}
print(length(row))
x[point,] <- row
point <- point + 1
}
}
dim(x)
x <- matrix(nrow=points, ncol=51+(52*history))
dim(x)
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r]
row <- as.numeric(dd[r, c(4:ncol(dd))])
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]))
}
print(length(row))
x[point,] <- row
point <- point + 1
}
}
head(x)
tail(x)
testPercentage <- 20
testSize <- round(nrow(x) * (testPercentage/100))
set.seed(1)
test <- sample(1:nrow(x), testSize, replace=FALSE)
train <- (1:length(y))[-test]
x.train <- x[train, ]
x.test <- x[test, ]
y.train <- y[train]
y.test <- y[test]
head(x.test)
nzv.columns <- nearZeroVar(x.train, freqCut = 30/1)
nzv.columns
is.highly.correlated <- findCorrelation(cor(x.train), 0.95)
is.highly.correlated
if (length(is.highly.correlated) != 0) {
x.train <- x.train[, -is.highly.correlated]
x.test <- x.test[, -is.highly.correlated]
}
testPercentage <- 20
testSize <- round(nrow(x) * (testPercentage/100))
set.seed(1)
test <- sample(1:nrow(x), testSize, replace=FALSE)
train <- (1:length(y))[-test]
x.train <- x[train, ]
x.test <- x[test, ]
y.train <- y[train]
y.test <- y[test]
nzv.columns <- nearZeroVar(x.train, freqCut = 30/1)
is.highly.correlated <- findCorrelation(cor(x.train), 0.95)
is.highly.correlated <- is.highly.correlated[-which(is.highly.correlated==1)]
is.highly.correlated
if (length(is.highly.correlated) != 0) {
x.train <- x.train[, -is.highly.correlated]
x.test <- x.test[, -is.highly.correlated]
}
x <- matrix(nrow=points, ncol=(52*history)+51)
dim(x)
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r]
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]))
}
row <- as.numeric(dd[r, c(4:ncol(dd))])
x[point,] <- row
point <- point + 1
}
}
x <- matrix(nrow=points, ncol=(52*history)+51)
dim(x)
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r]
row <- c()
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]))
}
row <- c(row, as.numeric(dd[r, c(4:ncol(dd))]))
x[point,] <- row
point <- point + 1
}
}
head(x)
tail(x)
testPercentage <- 20
testSize <- round(nrow(x) * (testPercentage/100))
set.seed(1)
test <- sample(1:nrow(x), testSize, replace=FALSE)
train <- (1:length(y))[-test]
x.train <- x[train, ]
x.test <- x[test, ]
y.train <- y[train]
y.test <- y[test]
nzv.columns <- nearZeroVar(x.train, freqCut = 30/1)
nzv.columns
is.highly.correlated <- findCorrelation(cor(x.train), 0.95)
is.highly.correlated
which(is.highly.correlated==1)
is.highly.correlated <- is.highly.correlated[-which(is.highly.correlated==1)]
is.highly.correlated
if (length(is.highly.correlated) != 0) {
x.train <- x.train[, -is.highly.correlated]
x.test <- x.test[, -is.highly.correlated]
}
dim(x.train)
transformation <- preProcess(x.train, method = c("center", "scale"))
x.train <- predict(transformation, x.train)
x.test <- predict(transformation, x.test)
testPercentage <- 20
testSize <- round(nrow(x) * (testPercentage/100))
set.seed(1)
test <- sample(1:nrow(x), testSize, replace=FALSE)
train <- (1:length(y))[-test]
x.train <- x[train, ]
x.test <- x[test, ]
y.train <- y[train]
y.test <- y[test]
nzv.columns <- nearZeroVar(x.train, freqCut = 30/1)
is.highly.correlated <- findCorrelation(cor(x.train), 0.95)
is.highly.correlated <- is.highly.correlated[-which(is.highly.correlated==1)]
if (length(is.highly.correlated) != 0) {
x.train <- x.train[, -is.highly.correlated]
x.test <- x.test[, -is.highly.correlated]
}
dim(x.train)
transformation <- preProcess(x.train, method = c("center", "scale"))
x.train <- predict(transformation, x.train)
x.test.untransformed <- x.test
x.test <- predict(transformation, x.test)
set.seed(1)
folds=5
repeats=1
trControl <- trainControl(method='cv', number=folds, repeats=repeats, returnResamp='none',
returnData=FALSE, savePredictions=TRUE,
verboseIter=TRUE, allowParallel=TRUE,
index=createMultiFolds(y.train, k=folds, times=repeats))
save.image(file="data.rda")
registerDoMC(cores=1)
tune.grid <- expand.grid(.n.trees=500, .interaction.depth=c(25), .shrinkage = c(0.04, 0.08, 0.16))
gbm <- train(x.train, y.train, "gbm", tuneGrid=tune.grid, trControl=trControl)
saveRDS(gbm, file="gbm.rds")
gbm
predictions <- as.vector(predict(gbm, newdata = x.test))
RMSE(predictions, y.test)
plot(predictions, y.test)
RMSE(x.test[,1], y.test)
plot(x.test[,1], y.test)
plot(gbm, metric = "RMSE")
days <- unique(data$day)
history <- 2
points_in_day <- length(which(data$day==days[1]))
points <- (points_in_day - history) * length(days)
y <- rep(NA, points)
x <- matrix(nrow=points, ncol=(52*history)+51+51+(52*(history-1)))
dim(x)
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r] - dd$X1[r-1] # predict movement
row <- c()
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]))
}
row <- c(row, as.numeric(dd[r, c(4:ncol(dd))]))
row <- c(row, as.numeric(dd[r, c(4:ncol(dd))]) - as.numeric(dd[r-1, c(4:ncol(dd))])
for(i in 1:(history-1)) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]) - as.numeric(dd[r-i-1, c(3:ncol(dd))]))
}
x[point,] <- row
point <- point + 1
}
}
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r] - dd$X1[r-1] # predict movement
row <- c()
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]))
}
row <- c(row, as.numeric(dd[r, c(4:ncol(dd))]))
row <- c(row, as.numeric(dd[r, c(4:ncol(dd))]) - as.numeric(dd[r-1, c(4:ncol(dd))])
for(i in 1:(history-1)) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]) - as.numeric(dd[r-i-1, c(3:ncol(dd))]))
}
print(length(row))
x[point,] <- row
point <- point + 1
}
}
x <- matrix(nrow=points, ncol=(52*history)+51+51+(52*(history-1)))
dim(x)
x <- matrix(nrow=points, ncol=(52*history)+51+51+(52*(history-1)))
dim(x)
point <- 1
for(day in days) {
dd <- data[which(data$day==day),] # get day_data (dd)
for(r in (history+1):nrow(dd)) {
y[point] <- dd$X1[r] - dd$X1[r-1] # predict movement
row <- c()
for(i in 1:history) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]))
}
row <- c(row, as.numeric(dd[r, c(4:ncol(dd))]))
row <- c(row, as.numeric(dd[r, c(4:ncol(dd))]) - as.numeric(dd[r-1, c(4:ncol(dd))]))
for(i in 1:(history-1)) {
row <- c(row, as.numeric(dd[r-i, c(3:ncol(dd))]) - as.numeric(dd[r-i-1, c(3:ncol(dd))]))
}
print(length(row))
x[point,] <- row
point <- point + 1
}
}
head(x)
tail(x)
testPercentage <- 20
testSize <- round(nrow(x) * (testPercentage/100))
set.seed(1)
test <- sample(1:nrow(x), testSize, replace=FALSE)
train <- (1:length(y))[-test]
x.train <- x[train, ]
x.test <- x[test, ]
y.train <- y[train]
y.test <- y[test]
nzv.columns <- nearZeroVar(x.train, freqCut = 30/1)
nzv.columns
if (length(nzv.columns) != 0) {
nzv.names <- names(x.train)[nzv.columns]
x.train <- x.train[, -nzv.columns]
x.test <- x.test[, -nzv.columns]
}
is.highly.correlated <- findCorrelation(cor(x.train), 0.95)
is.highly.correlated
which(is.highly.correlated==1)
is.highly.correlated <- is.highly.correlated[-which(is.highly.correlated==1)]
if (length(is.highly.correlated) != 0) {
x.train <- x.train[, -is.highly.correlated]
x.test <- x.test[, -is.highly.correlated]
}
dim(x.train)
transformation <- preProcess(x.train, method = c("center", "scale"))
x.train <- predict(transformation, x.train)
x.test.untransformed <- x.test
x.test <- predict(transformation, x.test)
set.seed(1)
folds=5
repeats=1
trControl <- trainControl(method='cv', number=folds, repeats=repeats, returnResamp='none',
returnData=FALSE, savePredictions=TRUE,
verboseIter=TRUE, allowParallel=TRUE,
index=createMultiFolds(y.train, k=folds, times=repeats))
save.image(file="data.rda")
registerDoMC(cores=1)
tune.grid <- expand.grid(.n.trees=500, .interaction.depth=c(25), .shrinkage = c(0.04, 0.08, 0.16))
gbm <- train(x.train, y.train, "gbm", tuneGrid=tune.grid, trControl=trControl)
saveRDS(gbm, file="gbm2.rds")
gbm
predictions <- as.vector(predict(gbm, newdata = x.test))
RMSE(predictions, y.test)
plot(predictions, y.test)
RMSE(x.test.untransformed[,1], y.test)
RMSE(x.test.untransformed[,1], y.test)
RMSE(x.test.untransformed[,1], y.test+predictions)
plot(x.test.untransformed[,1], y.test)
RMSE(predictions, y.test)
plot(predictions, y.test)
plot(y.test, predictions)
setwd("~/from_Dropbox/projects_2/A application/3way")
d <- readRDS("data.rds")
library(rgl)
install.packages("rgl")
library(rgl)
plot3d(d$MDVP.Fo.Hz.,d$MDVP.Jitter.Abs.,d$HNR, col = 1, type='s', size=1)
plot3d(d$V8,d$V9,d$V10, col = 1, type='s', size=1)
d <- readRDS("/Users/daniel/from_Dropbox/projects_2/A application/3way/forestfires.Rdata")
load("/Users/daniel/from_Dropbox/projects_2/A application/3way/forestfires.Rdata"
)
plot3d(d$V8,d$V9,d$V10, col = 1, type='s', size=1)
plot3d(d$DMC,d$temp,d$RH, col = 1, type='s', size=1)
library('testthat')
source('sample.R')
setwd("~/Dropbox/projects/camb/camb/tests")
source('../caretEnsemble.R')
source('../R/caretEnsemble.R')
source('../R/caretStack.R')
source('../R/Descriptors.R')
source('../R/DrawMolecules.R')
source('../R/helper_functions.R')
source('../R/MinPerformance.R')
source('../R/ModelAssessment.R')
source('../R/Modeling.R')
source('../R/optAUC.R')
source('../R/OptRMSE.R')
source('../R/PCAPlot.R')
source('../R/Predictions.R')
source('../R/Visualization.R')
test_dir('tests', reporter = 'Summary')
setwd("~/Dropbox/projects/camb/camb")
library('testthat')
source('../R/caretEnsemble.R')
source('../R/caretStack.R')
source('../R/Descriptors.R')
source('../R/DrawMolecules.R')
source('../R/helper_functions.R')
source('../R/MinPerformance.R')
source('../R/ModelAssessment.R')
source('../R/Modeling.R')
source('../R/optAUC.R')
source('../R/OptRMSE.R')
source('../R/PCAPlot.R')
source('../R/Predictions.R')
source('../R/Visualization.R')
library('testthat')
source('R/caretEnsemble.R')
source('R/caretStack.R')
source('R/Descriptors.R')
source('R/DrawMolecules.R')
source('R/helper_functions.R')
source('R/MinPerformance.R')
source('R/ModelAssessment.R')
source('R/Modeling.R')
source('R/optAUC.R')
source('R/OptRMSE.R')
source('R/PCAPlot.R')
source('R/Predictions.R')
source('R/Visualization.R')
test_dir('tests', reporter = 'Summary')
install.packages("testthat")
library(stringr)
context("String length")
library('testthat')
test_dir('testthat', reporter = 'Summary')
setwd("~/Dropbox/projects/camb/camb/tests")
test_dir('testthat', reporter = 'Summary')
test_dir('testthat', reporter = 'Summary')
test_dir('testthat', reporter = 'Summary')
setwd("~/Dropbox/projects/camb/examples/QSPR/LogS")
library(camb)
library(camb)
std.options <- StandardiseMolecules(structures.file="solubility_2007_ref2.sdf",
standardised.file="standardised.sdf",
removed.file="removed.sdf",
properties.file = "properties.csv",
remove.inorganic=TRUE,
fluorine.limit=3,
chlorine.limit=3,
bromine.limit=3,
iodine.limit=3,
min.mass.limit=20,
max.mass.limit=900)
saveRDS(std.options, "standardisation_options.rds")
setwd("~/Dropbox/projects/camb/camb/tests/testthat")
setwd("~/Dropbox/projects/camb/camb/tests")
library('testthat')
test_dir('testthat', reporter = 'Summary')
setwd("~/Dropbox/projects/camb/camb/tests")
test_dir('testthat', reporter = 'Summary')
setwd("~/Dropbox/projects/camb/camb/tests")
library('testthat')
test_dir('testthat', reporter = 'Summary')
test_dir('testthat', reporter = 'Summary')
test_dir('testthat', reporter = 'Summary')
library(stringr)
context("Demo Test Function")
test_that("str_length is number of characters", {
expect_equal(str_length("a"), 1)
expect_equal(str_length("ab"), 2)
expect_equal(str_length("abc"), 3)
})
